[
 {lager, [
   {log_root, "log/"},
   {colored, true},
   {colors, [
        {debug,     "\e[0;33m" },
        {info,      "\e[0;32m" },
        {notice,    "\e[1;32m" },
        {warning,   "\e[0;35m" },
        {error,     "\e[1;31m" },
        {critical,  "\e[1;31m" },
        {alert,     "\e[1;31m" },
        {emergency, "\e[1;31m" }
   ]},
   {handlers, [
     {lager_console_backend, [{level, info}]},
     {lager_file_backend, [{file, "error.log"}, {level, error}]},
     {lager_file_backend, [{file, "console.log"}, {level, info}]}
   ]},
   {extra_sinks, [
     {req_logs_lager_event, [
         {handlers, [
             {lager_console_backend, [
                 {level, info},
                 {formatter_config, [time, color, " [",severity,"] ", message, "\e[0m\r\n"]}
             ]},
             {lager_file_backend, [{file, "req.log"}, {level, info}]}
         ]}
     ]}
   ]}
 ]},
 {beamparticle, [
   {port, 8282},        %% HTTP port to listen to

   {cluster, [
       %% {peers, ['beamparticle@127.0.0.2', 'beamparticle@127.0.0.3']}
   ]},

   {gitbackend, [
       {rootpath, "/opt/beamparticle-data/git-data"},
       {username, "beamparticle"},
       {email, "beamparticle@localhost"}
   ]},

   {code, [
       %% set to false to publish code changes to staging,
       %% while publish to production as a separate step
       %% The default setting is to release directly to
       %% production.
       {save_to_production, false}
   ]},

   %% Python node must be compiled in the release before
   %% it can be enabled.
   {pynode, [
       {enable, false},
       {num_workers, 1},
       %% restart_policy = none | every_request
       %%   | {memory_limit, Bytes :: pos_integer()}
       {restart_policy, every_request},
       {shutdown_delay_msec, 10000},
       {min_alive_ratio, 1.0},
       {reconnect_delay_msec, 500}
   ]},

   %% Java node must be compiled in the release before
   %% it can be enabled.
   {javanode, [
       {enable, false},
       {num_workers, 1},
       {shutdown_delay_msec, 10000},
       {min_alive_ratio, 1.0},
       {reconnect_delay_msec, 500},
       {javaopts, "-Xms128m -Xmx512m"}
   ]},

   %% Do you need a local opentrace server?
   {opentracing_server, [
      %% enable or disable a local opentracing server
      {enable, false},

      {port, 9411},
      {num_acceptors, 10},
      {max_connections, 50},
      {backlog, 1024},

      {http_max_read_bytes, 2097152},  %% 2 MB
      {http_read_timeout_msec, 2000}
   ]},

   {opentracing, [
       %% set to false to disable opentracing (via otter)
       %% see otter app setting for information
       {enable, false},

       %% unless specified as false, the trace
       %% is allowed (provided enable is true above)
       %% So, give all the combinations which you would want
       %% to disable trace log.
       {trace_operator, false},
       {trace_anonymous_function, false},
       {trace_module, [
           %% uncomment the following line to disable trace log
           %% for functions in the erlang module.
           %%{erlang, false}
       ]},
       {trace_module_function, [
           %% uncomment the following line to disable trace log
           %% for erlang:length (arity is not important)
           %%{{erlang, length}, false}
       ]}
   ]},

   %% Default username and password for websocket and https which
   %% is used only till no user in that category (websocket or
   %% http_rest) is created. Once even a single user is created
   %% then this default shall not be used.
   %%
   %% TODO CHANGEME
   {auth, [
       {default_user, <<"root">>},
       {default_password, <<"root">>}
   ]},

   {google_oauth, [
       {client_id, <<"GOOGLE_CLIENT_ID">>},
       {client_secret, <<"GOOGLE_CLIENT_SECRET">>}
   ]},

   {slack, [
       %% see https://api.slack.com/web#authentication
       %% A token is equivalent to a username (for a given team) plus a password.
       {token, <<"Your slack bearer token goes here">>}
   ]},

   {jwt, [
       {expiry_seconds, 3600}
   ]},

   {http_rest, [
       {nr_listeners, 1000},
       {backlog, 1024},
       {max_connections, 50000},
       %% set ssl to false for http:// instead of https://
       {ssl, true},

       %% If you define allowed functions then this shall be
       %% the only functions allowed over the HTTP REST interface.
       %% Otherwise, all the functions whichever can be invoked via
       %% /fun/, /post/ or /api/ interface are allowed.
       %% Notice that arity of the function is intentionally left out,
       %% so for /fun/<fname> can be invoked for any arity and
       %% /post/ or /api/ will only work for arity 2 (as before).
       %%
       %% {allowed_dynamic_functions, [
       %%   <<"system_critical_info">>,
       %%   <<"transport_http_get">>
       %% ]},

       %% the maximum number of requests which will be serviced
       %% with the same process (by cowboy) when http client
       %% implements HTTP/1.1 keep-alive
       {max_keepalive, 100},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {http_nlp_rest, [
       {port, 8585},
       {nr_listeners, 10},
       {backlog, 64},
       {max_connections, 1000},
       %% set ssl to false for http:// instead of https://
       {ssl, true},

       %% IMPORTANT: The same setting for
       %% allowed_dynamic_functions applies as defined in http_rest
       %% section above.
       %% Ideally, this interface should not be used for building API
       %% but if it is then it will follow the same settings for
       %% allowed functions as in http_rest section.

       %% the maximum number of requests which will be serviced
       %% with the same process (by cowboy) when http client
       %% implements HTTP/1.1 keep-alive
       {max_keepalive, 100},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {highperf_http_rest, [
       {port, 8484},
       {nr_listeners, 1000},
       {backlog, 1024},
       {max_connections, 50000},

       %% If you define allowed functions then this shall be
       %% the only functions allowed over the HTTP REST interface.
       %% Otherwise, all the functions whichever can be invoked via
       %% /fun/, /post/ or /api/ interface are allowed.
       %% Notice that arity of the function is intentionally left out,
       %% so for /fun/<fname> can be invoked for any arity and
       %% /post/ or /api/ will only work for arity 2 (as before).
       %%
       %% {allowed_dynamic_functions, [
       %%   <<"system_critical_info">>,
       %%   <<"transport_http_get">>
       %% ]},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {smtp, [
       {enable, false},
       {domain, "example.com"},
       {dkim_selector, <<"dkimselector">>},
       {mail_root, "mail"}
   ]},

   {snapshot, [
       %% root folder relative to cwd where knowledge is exported
       %% when snapshots are created.
       {knowledge_root, "knowledge"}
   ]},

   {smtp_client, [
       {from_email, <<"Sender <sender@example.com>">>},
       {relay, <<"smtp.gmail.com">>},
       {username, <<"sender@example.com">>},
       {password, <<"password">>}
   ]},


   {erlcloud, [
        {aws_access_key_id, "your key"},
        {aws_secret_access_key, "your secret key"},
        {aws_security_token, "your token"},
        {aws_region, "your region"}
   ]},

   {caches, [
       {beamparticle_cache, [
           {enable, true},
           {memory_bytes, 67108864}, %% 64*1024*1024
           {segments, 20},
           {ttl_sec, 86400} %% 24*60*60
       ]},
       {data_cache, [
           {enable, true},
           {memory_bytes, 67108864}, %% 64*1024*1024
           {segments, 20},
           {ttl_sec, 86400} %% 24*60*60
       ]}
    ]},

   {palma_pools, [
       {
           beamparticle_k_model_pool,
           8,  %% Have more than 1 pool member always to avoid deadlock in certain cases
           {
               beamparticle_k_model_worker_id,
               {
                   leveldbstore_proc,
                   start_link,
                   [
                       dbowner,
                       beamparticle_k_model  %% match name in leveldb_config
                   ]
               },
               {permanent, 5},
               1000,
               worker,
               [leveldbstore_proc]
           },
           10000,
           #{min_alive_ratio => 1.0, reconnect_delay => 5000}
       }
   ]},
   {leveldb_config, [
       {beamparticle_k_model, [
           {prefix, <<>>},  %% match all
           {dbpath, "/opt/beamparticle-data/leveldb-k-data"},
           {dboptions, [{compression, lz4}
               ,{write_buffer_size, 167772160}  %% 160*1024*1024
               ,{use_bloomfilter, true}
           ]},
           {write_options, [
               {sync, true}
           ]},
           {timeout_msec, 600000},
           {pool, beamparticle_k_model_pool}  %% match with palma_pools
       ]}
   ]}
 ]},

 %% add else folsom_cowboy will listen on 127.0.0.1
 {folsom_cowboy, [
     {ip, {0, 0, 0, 0}},
     {port, 5565}
  ]},
 {egraph, [

   %% ------------- business jobs -----------

   {jobs, [
   ]},

   %% ---------------------------------------

   {circuit_breaker_delta_msec, 5000},

   %% maxt and reset are in millisecond
   %% maxr is number of melts in maxt time window
   {circuit_breakers, [
     {search, [{maxr, 1000}, {maxt, 60000}, {reset, 10000}]}
   ]},

   {opentracing, [
       %% set to false to disable opentracing (via otter)
       %% see otter app setting for information
       {enable, false}
   ]},

   %% ------------- http server settings ----

   %% remove the http_rest config to disable another http server,
   %% which is very useful when using egraph within another application
   %% which has http server already.
   {http_rest, [
       {log_enabled, true},  %% set it to true to get info in req.log
       {port, 8001},          %% HTTP listen port

       {nr_listeners, 10},
       {backlog, 16},
       {max_connections, 500},
       %% set ssl to false for http:// instead of https://
       %% if ssl is setup then ensure that priv/ssl/cert.pem is the server cert
       %% and priv/ssl/key.pem is the server private key in PEM format.
       {ssl, false},

       %% the maximum number of requests which will be serviced
       %% with the same process (by cowboy) when http client
       %% implements HTTP/1.1 keep-alive
       {max_keepalive, 100},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   %% ---------------------------------------

   {caches, [
       %% must match egraph_constants.hrl
       {cache_generic, [
           {enable, true},
           {memory_bytes, 1073741824}, %% 1024*1024*1024 or 1GB
           {segments, 1},
           {ttl_sec, 31536000} %% 365*24*60*60 or 1 year
       ]}
    ]},

   %% --------- index settings --------------

   {enable_reindex, true},
   {reindex_max_shard_per_run, 5},

   %% --- graph index settings --------------
   %% IMPORTANT: The pools mentioned below must exist
   %% within the palma_pools configuration.

   %% Notice that only pool must exist for adding or removing entries
   %% from index tables.
   {index_rw_pool, egraphdbrw_pool},

   %% In case the ro pools are more than one then the application
   %% will do load distribution across the pools and also use them
   %% for fallback.
   {index_ro_pools, [egraphdbro_pool]},

   {index_rw_timeout_msec, 5000},
   {index_ro_timeout_msec, 5000},
   %% ---------------------------------------

   %% --- graph link settings --------------
   %% IMPORTANT: The pools mentioned below must exist
   %% within the palma_pools configuration.

   %% Notice that only pool must exist for adding or removing entries
   %% from index tables.
   {link_rw_pool, egraphdbrw_pool},

   %% In case the ro pools are more than one then the application
   %% will do load distribution across the pools and also use them
   %% for fallback.
   {link_ro_pools, [egraphdbro_pool]},

   {link_rw_timeout_msec, 5000},
   {link_ro_timeout_msec, 5000},
   %% ---------------------------------------

   %% --- graph detail settings -------------
   %% IMPORTANT: The pools mentioned below must exist
   %% within the palma_pools configuration.

   %% Notice that only pool must exist for adding or removing entries
   %% from index tables.
   {detail_rw_pool, egraphdbrw_pool},

   %% In case the ro pools are more than one then the application
   %% will do load distribution across the pools and also use them
   %% for fallback.
   {detail_ro_pools, [egraphdbro_pool]},

   {detail_rw_timeout_msec, 5000},
   {detail_ro_timeout_msec, 5000},
   %% ---------------------------------------

   {palma_pools, [
            {
                egraphdbro_pool,
                1,  %% Total number of pool members
                {
                    mysql_dbro_worker_id,
                    {
                        mysql,
                        start_link,
                        [
                            [
                                {host, "127.0.0.1"}, %% mysql module uses host instead of hostname
                                {database, "egraph_db"},
                                {port, 3306},
                                {user, "egraph_user"}, %% mysql module requires this to be user instead of username
                                {password, "abc123"} ,
                                {keep_alive, 10000},  %% send mysql ping every 10 seconds if not used
                                {connect_timeout, 1000},  %% millisecond connect timeout
                                {query_cache_time, 500}
                            ]
                        ]
                    },
                    {permanent, 5},  %% see palma_supervisor2 (delay of 5 seconds)
                    2000,  %% milli seconds to wait before killing
                    worker,  %% it is a worker (and not supervisor)
                    [mysql]
                },
                10000, %% palma shutdown delay in milliseconds
                #{ min_alive_ratio => 1.0, reconnect_delay => 4000}  %% revolver options
            },
			{
                egraphdbrw_pool,
                1,  %% Total number of pool members
                {
                    mysql_dbrw_worker_id,
                    {
                        mysql,
                        start_link,
                        [
                            [
                                {host, "127.0.0.1"}, %% mysql module uses host instead of hostname
                                {database, "egraph_db"},
                                {port, 3306},
                                {user, "egraph_user"}, %% mysql module requires this to be user instead of username
                                {password, "abc123"} ,
                                {keep_alive, 10000},  %% send mysql ping every 10 seconds if not used
                                {connect_timeout, 1000},  %% millisecond connect timeout
                                {query_cache_time, 500}
                            ]
                        ]
                    },
                    {permanent, 5},  %% see palma_supervisor2 (delay of 5 seconds)
                    2000,  %% milli seconds to wait before killing
                    worker,  %% it is a worker (and not supervisor)
                    [mysql]
                },
                10000, %% palma shutdown delay in milliseconds
                #{ min_alive_ratio => 1.0, reconnect_delay => 4000}  %% revolver options
            }
   ]},

   %%% Monitoring bridge between Folsom and Graphite
   {folsom_graphite, [
       {enabled, false},  %% true when metrics are pushed to Graphite
       {endpoint, {"127.0.0.1", 5555}},
       {buckets, [
            [
                {name, egraph_folsom_core_worker},
                {bucket, "egraph"},
                {dimensions, [{cluster, <<"app">>}, {node, node}]},
                {folsom_table_prefixes, [
                    <<"api.">>,
                    <<"api-n.">>,
                    <<"sm.">>,
                    <<"2x">>,
                    <<"4x">>,
                    <<"5x">>
                ]},
                {interval, 5000}
            ]
       ]}
   ]},

   %% measure system metrics as given below
   {sysmon, [
        {enabled, true},
        {interval, 5000},
        {vm_metrics, [
                {cpu, avg1},
                {cpu, avg5},
                {cpu, avg15},
                {cpu, util},
                {memory, total},
                {memory, processes},
                {memory, ets},
                {memory, binary},
                {memory, atom},
                {run_queue, all},
                {scheduler, util},
                {io, all},
                {disk, all}
        ]}
   ]}
 ]},
 %% let fuse use folsom for metrics
 {fuse, [
   {stats_plugin, fuse_stats_folsom}
 ]},

 %% The options are in available from the marina project site.
 %% see https://github.com/neeraj9/marina
 {marina, [
 %%    {ip, "localhost"},
 %%    {port, 9042},
 %%    {username, <<"username">>},
 %%    {password, <<"password">>}
 ]},

 %% default configuration taken from otter/otter.app.src
 %% This is unnecessary unless you want to change it here
 %% or in the dynamic function to load configuration
 %% each time
 {otter, [
    {http_client, httpc}, %% ibrowse | httpc
    %% send to openzipkin
    %% {zipkin_collector_uri, "http://127.0.0.1:9411/api/v1/spans"},
    %% use the following (instead of above) if you want to send to Jaeger
    {zipkin_collector_uri, "http://127.0.0.1:9411/api/v1/spans"},
    %% {zipkin_collector_uri, "http://127.0.0.1:14268/api/traces?format=zipkin.thrift"},
    {zipkin_batch_interval_ms, 100},
    {zipkin_tag_host_ip, {127,0,0,1}},
    {zipkin_tag_host_port, 0},
    {zipkin_tag_host_service, "beamparticle"},
    {zipkin_add_host_tag_to_span, {"lc", ""}},
    {filter_rules, [
        {
            [
                %% prefilter
                {greater, otter_span_duration, 1}
            ],
            [
                %% final filter rules
                {snapshot_count, [long_span], [otter_span_name]}
            ]
        },
        {
            [
                %% prefilter
            ],
            [
                %% final filter rules
                {snapshot_count, [span_processed], [otter_span_name]},
                send_to_zipkin
            ]
        }
    ]}
  ]},
  %% OS Process Manager
  {erlexec, [
    {debug, 0},
    {verbose, false},
    {root, false}, %% Allow running child processes as root
    {args, []},
    {alarm, 5}  %% sec deadline for the port program to clean up child pids
    %%{user, []},
    %%{limit_users, []}
  ]}
].
