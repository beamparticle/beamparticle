[
 {lager, [
   {log_root, "log/"},
   {colored, true},
   {colors, [
        {debug,     "\e[0;33m" },
        {info,      "\e[0;32m" },
        {notice,    "\e[1;32m" },
        {warning,   "\e[0;35m" },
        {error,     "\e[1;31m" },
        {critical,  "\e[1;31m" },
        {alert,     "\e[1;31m" },
        {emergency, "\e[1;31m" }
   ]},
   {handlers, [
     {lager_console_backend, info},
     {lager_file_backend, [{file, "error.log"}, {level, error}]},
     {lager_file_backend, [{file, "console.log"}, {level, info}]}
   ]},
   {extra_sinks, [
     {req_logs_lager_event, [
         {handlers, [
             {lager_console_backend, [
                 info,
                 {lager_default_formatter, [time, color, " [",severity,"] ", message, "\e[0m\r\n"]}
             ]},
             {lager_file_backend, [{file, "req.log"}, {level, info}]}
         ]}
     ]}
   ]}
 ]},
 {beamparticle, [
   {port, 8282},        %% HTTP port to listen to

   {cluster, [
       %% {peers, ['beamparticle@127.0.0.2', 'beamparticle@127.0.0.3']}
   ]},

   {gitbackend, [
       {rootpath, "/opt/beamparticle-data/git-data"},
       {username, "beamparticle"},
       {email, "beamparticle@localhost"}
   ]},

   {code, [
       %% set to true to publish code changes to staging,
       %% while publish to production as a separate step
       %% The default setting is to release directly to
       %% production.
       {save_to_production, true}
   ]},

   %% Python node must be compiled in the release before
   %% it can be enabled.
   {pynode, [
       {enable, false},
       {num_workers, 1},
       {shutdown_delay_msec, 10000},
       {min_alive_ratio, 1.0},
       {reconnect_delay_msec, 500}
   ]},

   %% Java node must be compiled in the release before
   %% it can be enabled.
   {javanode, [
       {enable, false},
       {num_workers, 1},
       {shutdown_delay_msec, 10000},
       {min_alive_ratio, 1.0},
       {reconnect_delay_msec, 500},
       {javaopts, "-Xms128m -Xmx512m"}
   ]},

   %% Do you need a local opentrace server?
   {opentracing_server, [
      %% enable or disable a local opentracing server
      {enable, false},

      {port, 9411},
      {num_acceptors, 10},
      {max_connections, 50},
      {backlog, 1024},

      {http_max_read_bytes, 2097152},  %% 2 MB
      {http_read_timeout_msec, 2000}
   ]},

   {opentracing, [
       %% set to false to disable opentracing (via otter)
       %% see otter app setting for information
       {enable, false},

       %% unless specified as false, the trace
       %% is allowed (provided enable is true above)
       %% So, give all the combinations which you would want
       %% to disable trace log.
       {trace_operator, false},
       {trace_anonymous_function, false},
       {trace_module, [
           %% uncomment the following line to disable trace log
           %% for functions in the erlang module.
           %%{erlang, false}
       ]},
       {trace_module_function, [
           %% uncomment the following line to disable trace log
           %% for erlang:length (arity is not important)
           %%{{erlang, length}, false}
       ]}
   ]},

   %% Default username and password for websocket and https which
   %% is used only till no user in that category (websocket or
   %% http_rest) is created. Once even a single user is created
   %% then this default shall not be used.
   %%
   %% TODO CHANGEME
   {auth, [
       {default_user, <<"root">>},
       {default_password, <<"root">>}
   ]},

   {http_rest, [
       {nr_listeners, 1000},
       {backlog, 1024},
       {max_connections, 50000},
       %% set ssl to false for http:// instead of https://
       {ssl, true},

       %% the maximum number of requests which will be serviced
       %% with the same process (by cowboy) when http client
       %% implements HTTP/1.1 keep-alive
       {max_keepalive, 100},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {http_nlp_rest, [
       {port, 8585},
       {nr_listeners, 10},
       {backlog, 64},
       {max_connections, 1000},
       %% set ssl to false for http:// instead of https://
       {ssl, true},

       %% the maximum number of requests which will be serviced
       %% with the same process (by cowboy) when http client
       %% implements HTTP/1.1 keep-alive
       {max_keepalive, 100},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {highperf_http_rest, [
       {port, 8484},
       {nr_listeners, 1000},
       {backlog, 1024},
       {max_connections, 50000},

       {max_read_length, 12582912},  %% 12 * 1024 * 1024 or 12 MB
       {max_read_timeout_msec, 10000}
   ]},

   {smtp, [
       {enable, false},
       {domain, "example.com"},
       {dkim_selector, <<"dkimselector">>},
       {mail_root, "mail"}
   ]},

   {snapshot, [
       %% root folder relative to cwd where knowledge is exported
       %% when snapshots are created.
       {knowledge_root, "knowledge"}
   ]},

   {smtp_client, [
       {from_email, <<"Sender <sender@example.com>">>},
       {relay, <<"smtp.gmail.com">>},
       {username, <<"sender@example.com">>},
       {password, <<"password">>}
   ]},


   {erlcloud, [
        {aws_access_key_id, "your key"},
        {aws_secret_access_key, "your secret key"},
        {aws_security_token, "your token"},
        {aws_region, "your region"}
   ]},

   {caches, [
       {beamparticle_cache, [
           {enable, true},
           {memory_bytes, 67108864}, %% 64*1024*1024
           {segments, 20},
           {ttl_sec, 86400} %% 24*60*60
       ]},
       {data_cache, [
           {enable, true},
           {memory_bytes, 67108864}, %% 64*1024*1024
           {segments, 20},
           {ttl_sec, 86400} %% 24*60*60
       ]}
    ]},

   {palma_pools, [
       {
           beamparticle_k_model_pool,
           8,  %% Have more than 1 pool member always to avoid deadlock in certain cases
           {
               beamparticle_k_model_worker_id,
               {
                   leveldbstore_proc,
                   start_link,
                   [
                       dbowner,
                       beamparticle_k_model  %% match name in leveldb_config
                   ]
               },
               {permanent, 5},
               1000,
               worker,
               [leveldbstore_proc]
           },
           10000,
           #{min_alive_ratio => 1.0, reconnect_delay => 5000}
       }
   ]},
   {leveldb_config, [
       {beamparticle_k_model, [
           {prefix, <<>>},  %% match all
           {dbpath, "/opt/beamparticle-data/leveldb-k-data"},
           {dboptions, [{compression, lz4}
               ,{write_buffer_size, 167772160}  %% 160*1024*1024
               ,{use_bloomfilter, true}
           ]},
           {write_options, [
               {sync, true}
           ]},
           {timeout_msec, 600000},
           {pool, beamparticle_k_model_pool}  %% match with palma_pools
       ]}
   ]}
 ]},

 %% The options are in available from the marina project site.
 %% see https://github.com/neeraj9/marina
 %%{marina, [
 %%    {ip, "localhost"},
 %%    {port, 9042},
 %%    {username, <<"username">>},
 %%    {password, <<"password">>}
 %%]},

 %% default configuration taken from otter/otter.app.src
 %% This is unnecessary unless you want to change it here
 %% or in the dynamic function to load configuration
 %% each time
 {otter, [
    {http_client, httpc}, %% ibrowse | httpc
    %% send to openzipkin
    %% {zipkin_collector_uri, "http://127.0.0.1:9411/api/v1/spans"},
    %% use the following (instead of above) if you want to send to Jaeger
    {zipkin_collector_uri, "http://127.0.0.1:9411/api/v1/spans"},
    %% {zipkin_collector_uri, "http://127.0.0.1:14268/api/traces?format=zipkin.thrift"},
    {zipkin_batch_interval_ms, 100},
    {zipkin_tag_host_ip, {127,0,0,1}},
    {zipkin_tag_host_port, 0},
    {zipkin_tag_host_service, "beamparticle"},
    {zipkin_add_host_tag_to_span, {"lc", ""}},
    {filter_rules, [
        {
            [
                %% prefilter
                {greater, otter_span_duration, 1}
            ],
            [
                %% final filter rules
                {snapshot_count, [long_span], [otter_span_name]}
            ]
        },
        {
            [
                %% prefilter
            ],
            [
                %% final filter rules
                {snapshot_count, [span_processed], [otter_span_name]},
                send_to_zipkin
            ]
        }
    ]}
  ]},
  %% OS Process Manager
  {erlexec, [
    {debug, 0},
    {verbose, false},
    {root, false}, %% Allow running child processes as root
    {args, []},
    {alarm, 5}  %% sec deadline for the port program to clean up child pids
    %%{user, []},
    %%{limit_users, []}
  ]}
].
