#!/usr/bin/env bash
#
#
# Sample invocation is as follows:
#
# ./pynode "py@127.0.0.1" "COOKIE" "erl@127.0.0.1" 1
#
# If you want to redirect logs to rotating file
#
# ./pynode "py@127.0.0.1" "COOKIE" "erl@127.0.0.1" 1 /tmp/pynode.log
#
# If you want to change the initial loglevel to DEBUG
#
# ./pynode "py@127.0.0.1" "COOKIE" "erl@127.0.0.1" 1 /tmp/pynode.log DEBUG
#

##############################################################################
##
##  pynode start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="pynode"
APP_BASE_NAME=`basename "$0"`

# Add default PYTHON options here. You can also use PYTHON_OPTS and PYTHONNODE_OPTS to pass PYTHON options to this script.
DEFAULT_PYTHON_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/lib:$APP_HOME/lib/Pyrlang.zip

# Determine the Python3 command to use to start the PYTHON.
if [ -n "$PYTHONHOME" ] ; then
    PYTHONCMD="$PYTHONHOME/bin/python3"
    if [ ! -x "$PYTHONCMD" ] ; then
        die "ERROR: PYTHONHOME is set to an invalid directory: $PYTHONHOME

Please set the PYTHONHOME variable in your environment to match the
location of your Python3 installation."
    fi
else
    PYTHONCMD="python3"
    which ${PYTHONCMD} >/dev/null 2>&1 || die "ERROR: PYTHONHOME is not set and no 'java' command could be found in your PATH.

Please set the PYTHONHOME variable in your environment to match the
location of your Python3 installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Cygwin, switch paths to Windows format before running python3
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    PYTHONCMD=`cygpath --unix "$PYTHONCMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the PYTHON_OPTS And PYTHONNODE_OPTS values into an array, following the shell quoting and substitution rules
function splitPythonOpts() {
    PYTHON_OPTS=("$@")
}
eval splitPythonOpts $DEFAULT_PYTHON_OPTS $PYTHON_OPTS $PYTHONNODE_OPTS

export PYTHONPATH="$CLASSPATH:$PYTHON_OPT_PATHS"

exec "$PYTHONCMD" "${PYTHON_OPTS[@]}" $APP_HOME/lib/pynode.py "$@"
